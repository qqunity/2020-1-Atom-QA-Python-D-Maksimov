{"name": "test_reg_user_4", "status": "broken", "statusDetails": {"message": "api.utils.exceptions.ResponseStatusCodeException:  Got 500 INTERNAL SERVER ERROR for URL \"http://172.18.0.5:8080/reg\"", "trace": "self = <test_api.TestApi object at 0x7f206e62cca0>\ncreate_fake_user = ('mitofansamolov', '@g5WkH1aM2', 'ostromir50@mail.ru')\n\n    @allure.feature('API tests')\n    @allure.story('Reg api story')\n    def test_reg_user_4(self, create_fake_user):\n        \"\"\"Проверка кода ответа при совпадении поля email с уже существующим в БД\"\"\"\n        self.logger.start_logging(f'./project/app_logs/{inspect.getframeinfo(inspect.currentframe()).function}_api_log.txt')\n        with allure.step('Создаём информацию о фейковом пользователе'):\n            username, password, email = create_fake_user\n        with allure.step('Регистрируем пользователя при совпадении поля email с уже существующим в БД'):\n            try:\n                response = self.api_client.reg_user(username + 'q', password, password, email, status_code=409)\n            except ResponseStatusCodeException as exception:\n                self.logger.stop_logging()\n                allure.attach(self.logger.get_log_info(), 'App log', allure.attachment_type.TEXT)\n>               raise exception\n\ncreate_fake_user = ('mitofansamolov', '@g5WkH1aM2', 'ostromir50@mail.ru')\nemail      = 'ostromir50@mail.ru'\npassword   = '@g5WkH1aM2'\nself       = <test_api.TestApi object at 0x7f206e62cca0>\nusername   = 'mitofansamolov'\n\nproject/tests/test_api.py:108: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nproject/tests/test_api.py:104: in test_reg_user_4\n    response = self.api_client.reg_user(username + 'q', password, password, email, status_code=409)\n        create_fake_user = ('mitofansamolov', '@g5WkH1aM2', 'ostromir50@mail.ru')\n        email      = 'ostromir50@mail.ru'\n        password   = '@g5WkH1aM2'\n        self       = <test_api.TestApi object at 0x7f206e62cca0>\n        username   = 'mitofansamolov'\nproject/api/client.py:71: in reg_user\n    raise exception\n        autoremove = False\n        confirm_password = '@g5WkH1aM2'\n        data       = {'confirm': '@g5WkH1aM2', 'email': 'ostromir50@mail.ru', 'password': '@g5WkH1aM2', 'submit': 'Register', ...}\n        email      = 'ostromir50@mail.ru'\n        headers    = {'Content-Type': 'application/x-www-form-urlencoded', 'Referer': 'http://127.0.0.1:8080/reg'}\n        location   = 'reg'\n        password   = '@g5WkH1aM2'\n        self       = <api.client.ApiClient object at 0x7f206e581d00>\n        status_code = 409\n        username   = 'mitofansamolovq'\nproject/api/client.py:67: in reg_user\n    response = self.make_request('POST', location, json_convert=False, data=data, headers=headers, allow_redirects=False, status_code=201 if status_code is None else status_code)\n        autoremove = False\n        confirm_password = '@g5WkH1aM2'\n        data       = {'confirm': '@g5WkH1aM2', 'email': 'ostromir50@mail.ru', 'password': '@g5WkH1aM2', 'submit': 'Register', ...}\n        email      = 'ostromir50@mail.ru'\n        headers    = {'Content-Type': 'application/x-www-form-urlencoded', 'Referer': 'http://127.0.0.1:8080/reg'}\n        location   = 'reg'\n        password   = '@g5WkH1aM2'\n        self       = <api.client.ApiClient object at 0x7f206e581d00>\n        status_code = 409\n        username   = 'mitofansamolovq'\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.client.ApiClient object at 0x7f206e581d00>, method = 'POST'\nlocation = 'reg', status_code = 409\nheaders = {'Content-Type': 'application/x-www-form-urlencoded', 'Referer': 'http://127.0.0.1:8080/reg'}\nparams = None\ndata = {'confirm': '@g5WkH1aM2', 'email': 'ostromir50@mail.ru', 'password': '@g5WkH1aM2', 'submit': 'Register', ...}\njson_convert = False, custom_location = False, allow_redirects = False\njson = None\n\n    def make_request(self, method, location, status_code=200, headers=None, params=None, data=None, json_convert=True,\n                     custom_location=False, allow_redirects=True, json=None):\n        if not custom_location:\n            url = urljoin(self.base_url, location)\n        else:\n            url = location\n    \n        response = self.session.request(method, url, headers=headers, params=params, data=data,\n                                        allow_redirects=allow_redirects, json=json)\n    \n        if response.status_code != status_code:\n>           raise ResponseStatusCodeException(f' Got {response.status_code} {response.reason} for URL \"{url}\"')\nE           api.utils.exceptions.ResponseStatusCodeException:  Got 500 INTERNAL SERVER ERROR for URL \"http://172.18.0.5:8080/reg\"\n\nallow_redirects = False\ncustom_location = False\ndata       = {'confirm': '@g5WkH1aM2', 'email': 'ostromir50@mail.ru', 'password': '@g5WkH1aM2', 'submit': 'Register', ...}\nheaders    = {'Content-Type': 'application/x-www-form-urlencoded', 'Referer': 'http://127.0.0.1:8080/reg'}\njson       = None\njson_convert = False\nlocation   = 'reg'\nmethod     = 'POST'\nparams     = None\nresponse   = <Response [500]>\nself       = <api.client.ApiClient object at 0x7f206e581d00>\nstatus_code = 409\nurl        = 'http://172.18.0.5:8080/reg'\n\nproject/api/client.py:28: ResponseStatusCodeException"}, "description": "Проверка кода ответа при совпадении поля email с уже существующим в БД", "steps": [{"name": "Создаём информацию о фейковом пользователе", "status": "passed", "start": 1590595238873, "stop": 1590595238873}, {"name": "Регистрируем пользователя при совпадении поля email с уже существующим в БД", "status": "broken", "statusDetails": {"message": "api.utils.exceptions.ResponseStatusCodeException:  Got 500 INTERNAL SERVER ERROR for URL \"http://172.18.0.5:8080/reg\"\n", "trace": "  File \"/media/qunity/Workspace/Python_projects/qa-project/project/tests/test_api.py\", line 108, in test_reg_user_4\n    raise exception\n  File \"/media/qunity/Workspace/Python_projects/qa-project/project/tests/test_api.py\", line 104, in test_reg_user_4\n    response = self.api_client.reg_user(username + 'q', password, password, email, status_code=409)\n  File \"/media/qunity/Workspace/Python_projects/qa-project/project/api/client.py\", line 71, in reg_user\n    raise exception\n  File \"/media/qunity/Workspace/Python_projects/qa-project/project/api/client.py\", line 67, in reg_user\n    response = self.make_request('POST', location, json_convert=False, data=data, headers=headers, allow_redirects=False, status_code=201 if status_code is None else status_code)\n  File \"/media/qunity/Workspace/Python_projects/qa-project/project/api/client.py\", line 28, in make_request\n    raise ResponseStatusCodeException(f' Got {response.status_code} {response.reason} for URL \"{url}\"')\n"}, "attachments": [{"name": "App log", "source": "99e5d471-8584-4916-914d-44e4da257096-attachment.txt", "type": "text/plain"}], "start": 1590595238873, "stop": 1590595239022}], "start": 1590595238667, "stop": 1590595239022, "uuid": "7afb26ca-6b2b-4db5-b5df-d3da2b8db6b9", "historyId": "8d5243e763b4f917fdb183d097d8a3a6", "testCaseId": "011e3da53b263d5c938eae7af03e87ac", "fullName": "tests.test_api.TestApi#test_reg_user_4", "labels": [{"name": "feature", "value": "API tests"}, {"name": "story", "value": "Reg api story"}, {"name": "tag", "value": "API"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_api"}, {"name": "subSuite", "value": "TestApi"}, {"name": "host", "value": "dmaksimov-laptop"}, {"name": "thread", "value": "18989-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_api"}]}